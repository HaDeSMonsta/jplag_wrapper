#compdef jplag_wrapper

autoload -U is-at-least

_jplag_wrapper() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" : \
'-l+[Log Level to use]:LOG_LEVEL:_default' \
'--log-level=[Log Level to use]:LOG_LEVEL:_default' \
'-c+[Specify the config toml file to look for if you don'\''t want to use the default config.toml]:CONFIG:_default' \
'--config=[Specify the config toml file to look for if you don'\''t want to use the default config.toml]:CONFIG:_default' \
'-s+[Where the input file can be found]:SOURCE_ZIP:_default' \
'--source-zip=[Where the input file can be found]:SOURCE_ZIP:_default' \
'-t+[Where to put the results]:TARGET_DIR:_default' \
'--target-dir=[Where to put the results]:TARGET_DIR:_default' \
'--tmp-dir=[Where to put the temporary files]:TMP_DIR:_default' \
'-i+[Where to find the ignore file]:IGNORE_FILE:_default' \
'--ignore-file=[Where to find the ignore file]:IGNORE_FILE:_default' \
'-j+[Where the jplag jar can be found]:JPLAG_JAR:_default' \
'--jplag-jar=[Where the jplag jar can be found]:JPLAG_JAR:_default' \
'-v[Print version]' \
'--version[Print version]' \
'--init[Initialize the config, will create (or override!) \`config.toml\` with all values and fill it with the defaults]' \
'--keep-non-ascii[Keep all non ASCII characters from all submissions]' \
'-p[Set to not remove {{tmp_dir}} when the program finishes]' \
'--preserve-tmp-dir[Set to not remove {{tmp_dir}} when the program finishes]' \
'--ignore-output[Set to ignore the output of jplag]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'*::add_sub_dirs -- Additional submission directories (if you read this with -h, use --help for full docs):_default' \
&& ret=0
}

(( $+functions[_jplag_wrapper_commands] )) ||
_jplag_wrapper_commands() {
    local commands; commands=()
    _describe -t commands 'jplag_wrapper commands' commands "$@"
}

if [ "$funcstack[1]" = "_jplag_wrapper" ]; then
    _jplag_wrapper "$@"
else
    compdef _jplag_wrapper jplag_wrapper
fi
